package com.tfg.redis;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import javax.mail.Address;
import javax.mail.BodyPart;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.integration.channel.DirectChannel;
import org.springframework.integration.mail.ImapIdleChannelAdapter;
import org.springframework.integration.annotation.ServiceActivator;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageHandler;
import org.springframework.messaging.MessagingException;

import org.springframework.integration.mail.ImapMailReceiver;
import org.springframework.integration.mail.transformer.MailToStringTransformer;
/**
 *
 * Spring Boot application starter class
 */
@SpringBootApplication
public class Application {
	private static Log logger = LogFactory.getLog(Application.class);

	
	
    public static void main(String[] args) throws Exception {
    	
    	@SuppressWarnings("resource")
		ClassPathXmlApplicationContext ac = new ClassPathXmlApplicationContext(
				"/META-INF/spring/integration/gmail-imap-idle-config.xml");
		DirectChannel inputChannel = ac.getBean("receiveChannel", DirectChannel.class);
		
		
		
			inputChannel.subscribe(new MessageHandler() {
			@Override
			public void handleMessage(Message<?> message) throws MessagingException {
				//logger.info("Message: " + message);
				
			System.out.println("Handle Message...............");
			
				
				MailToStringTransformer m2s = new MailToStringTransformer();
	            m2s.setCharset("utf-8");
	            System.out.println("Message: " + m2s.transform(message));

	            System.out.println("Message: " + message.getPayload());
	            Object payload = message.getPayload();

	            if (payload instanceof MimeMessage) {
	                try {

	                    javax.mail.Message mailMessage = (javax.mail.Message) payload;
	                    System.out.println(mailMessage.getSubject());
	                    System.out.println(getTextFromMessage(mailMessage));

	                    Address[] receipts = mailMessage.getAllRecipients();
	                    System.out.println("RECEIPIENTS MAIL ID");
	                    if (receipts != null && receipts.length > 0) {
	                        for (int i = 0; i < receipts.length; i++) {
	                            System.out.println(((InternetAddress) receipts[i]).getAddress());
	                        }
	                    }

	                    System.out.println("FROM MAIL ID");
	                    Address[] froms = mailMessage.getFrom();
	                    String email = froms == null ? null
	                            : ((InternetAddress) froms[0]).getAddress();
	                    System.out.println(email);

	                } catch (Exception e) {
	                    // TODO Auto-generated catch block
	                    e.printStackTrace();
	                }

	            }
	        }
	    });
    }
			
			
			public static String getTextFromMessage(javax.mail.Message message) throws Exception {
			    String result = "";
			    if (message.isMimeType("text/plain")) {
			        result = message.getContent().toString();
			    } else if (message.isMimeType("multipart/*")) {
			        MimeMultipart mimeMultipart = (MimeMultipart) message.getContent();
			        result = getTextFromMimeMultipart(mimeMultipart);
			    }
			    return result;
			}
		
			private static String getTextFromMimeMultipart(MimeMultipart mimeMultipart) throws Exception {
			    String result = "";
			    int count = mimeMultipart.getCount();
			    for (int i = 0; i < count; i++) {
			        BodyPart bodyPart = mimeMultipart.getBodyPart(i);
			        if (bodyPart.isMimeType("text/plain")) {
			            result = result + "\n" + bodyPart.getContent();
			            break; // without break same text appears twice in my tests
			        } else if (bodyPart.isMimeType("text/html")) {
			            String html = (String) bodyPart.getContent();
			            // result = result + "\n" + org.jsoup.Jsoup.parse(html).text();
			        } else if (bodyPart.getContent() instanceof MimeMultipart) {
			            result = result + getTextFromMimeMultipart((MimeMultipart) bodyPart.getContent());
			        }
			    }
			    return result;
			}
		
		
			  
			  
		
			
       // SpringApplication.run(Application.class, args);
   // }
}











		
